// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covenant.API.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for LauncherType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum LauncherType
    {
        [EnumMember(Value = "Wmic")]
        Wmic,
        [EnumMember(Value = "Regsvr32")]
        Regsvr32,
        [EnumMember(Value = "Mshta")]
        Mshta,
        [EnumMember(Value = "Cscript")]
        Cscript,
        [EnumMember(Value = "Wscript")]
        Wscript,
        [EnumMember(Value = "PowerShell")]
        PowerShell,
        [EnumMember(Value = "Binary")]
        Binary,
        [EnumMember(Value = "MSBuild")]
        MSBuild,
        [EnumMember(Value = "InstallUtil")]
        InstallUtil,
        [EnumMember(Value = "ShellCode")]
        ShellCode
    }
    internal static class LauncherTypeEnumExtension
    {
        internal static string ToSerializedValue(this LauncherType? value)
        {
            return value == null ? null : ((LauncherType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this LauncherType value)
        {
            switch( value )
            {
                case LauncherType.Wmic:
                    return "Wmic";
                case LauncherType.Regsvr32:
                    return "Regsvr32";
                case LauncherType.Mshta:
                    return "Mshta";
                case LauncherType.Cscript:
                    return "Cscript";
                case LauncherType.Wscript:
                    return "Wscript";
                case LauncherType.PowerShell:
                    return "PowerShell";
                case LauncherType.Binary:
                    return "Binary";
                case LauncherType.MSBuild:
                    return "MSBuild";
                case LauncherType.InstallUtil:
                    return "InstallUtil";
                case LauncherType.ShellCode:
                    return "ShellCode";
            }
            return null;
        }

        internal static LauncherType? ParseLauncherType(this string value)
        {
            switch( value )
            {
                case "Wmic":
                    return LauncherType.Wmic;
                case "Regsvr32":
                    return LauncherType.Regsvr32;
                case "Mshta":
                    return LauncherType.Mshta;
                case "Cscript":
                    return LauncherType.Cscript;
                case "Wscript":
                    return LauncherType.Wscript;
                case "PowerShell":
                    return LauncherType.PowerShell;
                case "Binary":
                    return LauncherType.Binary;
                case "MSBuild":
                    return LauncherType.MSBuild;
                case "InstallUtil":
                    return LauncherType.InstallUtil;
                case "ShellCode":
                    return LauncherType.ShellCode;
            }
            return null;
        }
    }
}
