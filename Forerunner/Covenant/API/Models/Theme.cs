// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covenant.API.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Theme
    {
        /// <summary>
        /// Initializes a new instance of the Theme class.
        /// </summary>
        public Theme()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Theme class.
        /// </summary>
        /// <param name="codeMirrorTheme">Possible values include: 'default',
        /// 'night'</param>
        public Theme(string name, int? id = default(int?), string description = default(string), string backgroundColor = default(string), string backgroundTextColor = default(string), string primaryColor = default(string), string primaryTextColor = default(string), string primaryHighlightColor = default(string), string secondaryColor = default(string), string secondaryTextColor = default(string), string secondaryHighlightColor = default(string), string terminalColor = default(string), string terminalTextColor = default(string), string terminalHighlightColor = default(string), string terminalBorderColor = default(string), string navbarColor = default(string), string sidebarColor = default(string), string inputColor = default(string), string inputDisabledColor = default(string), string inputTextColor = default(string), string inputHighlightColor = default(string), string textLinksColor = default(string), CodeMirrorTheme? codeMirrorTheme = default(CodeMirrorTheme?))
        {
            Id = id;
            Name = name;
            Description = description;
            BackgroundColor = backgroundColor;
            BackgroundTextColor = backgroundTextColor;
            PrimaryColor = primaryColor;
            PrimaryTextColor = primaryTextColor;
            PrimaryHighlightColor = primaryHighlightColor;
            SecondaryColor = secondaryColor;
            SecondaryTextColor = secondaryTextColor;
            SecondaryHighlightColor = secondaryHighlightColor;
            TerminalColor = terminalColor;
            TerminalTextColor = terminalTextColor;
            TerminalHighlightColor = terminalHighlightColor;
            TerminalBorderColor = terminalBorderColor;
            NavbarColor = navbarColor;
            SidebarColor = sidebarColor;
            InputColor = inputColor;
            InputDisabledColor = inputDisabledColor;
            InputTextColor = inputTextColor;
            InputHighlightColor = inputHighlightColor;
            TextLinksColor = textLinksColor;
            CodeMirrorTheme = codeMirrorTheme;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "backgroundColor")]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "backgroundTextColor")]
        public string BackgroundTextColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "primaryColor")]
        public string PrimaryColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "primaryTextColor")]
        public string PrimaryTextColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "primaryHighlightColor")]
        public string PrimaryHighlightColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secondaryColor")]
        public string SecondaryColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secondaryTextColor")]
        public string SecondaryTextColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secondaryHighlightColor")]
        public string SecondaryHighlightColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terminalColor")]
        public string TerminalColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terminalTextColor")]
        public string TerminalTextColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terminalHighlightColor")]
        public string TerminalHighlightColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terminalBorderColor")]
        public string TerminalBorderColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "navbarColor")]
        public string NavbarColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sidebarColor")]
        public string SidebarColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inputColor")]
        public string InputColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inputDisabledColor")]
        public string InputDisabledColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inputTextColor")]
        public string InputTextColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inputHighlightColor")]
        public string InputHighlightColor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "textLinksColor")]
        public string TextLinksColor { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'default', 'night'
        /// </summary>
        [JsonProperty(PropertyName = "codeMirrorTheme")]
        public CodeMirrorTheme? CodeMirrorTheme { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (BackgroundColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(BackgroundColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "BackgroundColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (BackgroundTextColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(BackgroundTextColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "BackgroundTextColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (PrimaryColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(PrimaryColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "PrimaryColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (PrimaryTextColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(PrimaryTextColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "PrimaryTextColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (PrimaryHighlightColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(PrimaryHighlightColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "PrimaryHighlightColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (SecondaryColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(SecondaryColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "SecondaryColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (SecondaryTextColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(SecondaryTextColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "SecondaryTextColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (SecondaryHighlightColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(SecondaryHighlightColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "SecondaryHighlightColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (TerminalColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(TerminalColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "TerminalColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (TerminalTextColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(TerminalTextColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "TerminalTextColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (TerminalHighlightColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(TerminalHighlightColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "TerminalHighlightColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (TerminalBorderColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(TerminalBorderColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "TerminalBorderColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (NavbarColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(NavbarColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "NavbarColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (SidebarColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(SidebarColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "SidebarColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (InputColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(InputColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "InputColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (InputDisabledColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(InputDisabledColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "InputDisabledColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (InputTextColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(InputTextColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "InputTextColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (InputHighlightColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(InputHighlightColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "InputHighlightColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
            if (TextLinksColor != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(TextLinksColor, "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "TextLinksColor", "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$");
                }
            }
        }
    }
}
