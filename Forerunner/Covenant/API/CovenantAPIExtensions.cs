// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covenant.API
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CovenantAPI.
    /// </summary>
    public static partial class CovenantAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CovenantUser> ApiUsersGet(this ICovenantAPI operations)
            {
                return operations.ApiUsersGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CovenantUser>> ApiUsersGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static CovenantUser ApiUsersPut(this ICovenantAPI operations, CovenantUserLogin user = default(CovenantUserLogin))
            {
                return operations.ApiUsersPutAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CovenantUser> ApiUsersPutAsync(this ICovenantAPI operations, CovenantUserLogin user = default(CovenantUserLogin), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersPutWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='login'>
            /// </param>
            public static CovenantUser ApiUsersPost(this ICovenantAPI operations, CovenantUserLogin login = default(CovenantUserLogin))
            {
                return operations.ApiUsersPostAsync(login).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='login'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CovenantUser> ApiUsersPostAsync(this ICovenantAPI operations, CovenantUserLogin login = default(CovenantUserLogin), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersPostWithHttpMessagesAsync(login, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CovenantUser ApiUsersByIdGet(this ICovenantAPI operations, string id)
            {
                return operations.ApiUsersByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CovenantUser> ApiUsersByIdGetAsync(this ICovenantAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiUsersByIdDelete(this ICovenantAPI operations, string id)
            {
                operations.ApiUsersByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiUsersByIdDeleteAsync(this ICovenantAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiUsersByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CovenantUser ApiUsersCurrentGet(this ICovenantAPI operations)
            {
                return operations.ApiUsersCurrentGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CovenantUser> ApiUsersCurrentGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersCurrentGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='login'>
            /// </param>
            public static CovenantUserLoginResult ApiUsersLoginPost(this ICovenantAPI operations, CovenantUserLogin login = default(CovenantUserLogin))
            {
                return operations.ApiUsersLoginPostAsync(login).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='login'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CovenantUserLoginResult> ApiUsersLoginPostAsync(this ICovenantAPI operations, CovenantUserLogin login = default(CovenantUserLogin), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersLoginPostWithHttpMessagesAsync(login, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IdentityUserRoleString> ApiUsersRolesGet(this ICovenantAPI operations)
            {
                return operations.ApiUsersRolesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentityUserRoleString>> ApiUsersRolesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersRolesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<IdentityUserRoleString> ApiUsersByIdRolesGet(this ICovenantAPI operations, string id)
            {
                return operations.ApiUsersByIdRolesGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentityUserRoleString>> ApiUsersByIdRolesGetAsync(this ICovenantAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersByIdRolesGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static IdentityUserRoleString ApiUsersByIdRolesByRidGet(this ICovenantAPI operations, string id, string rid)
            {
                return operations.ApiUsersByIdRolesByRidGetAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityUserRoleString> ApiUsersByIdRolesByRidGetAsync(this ICovenantAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersByIdRolesByRidGetWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static IdentityUserRoleString ApiUsersByIdRolesByRidPost(this ICovenantAPI operations, string id, string rid)
            {
                return operations.ApiUsersByIdRolesByRidPostAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityUserRoleString> ApiUsersByIdRolesByRidPostAsync(this ICovenantAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUsersByIdRolesByRidPostWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static void ApiUsersByIdRolesByRidDelete(this ICovenantAPI operations, string id, string rid)
            {
                operations.ApiUsersByIdRolesByRidDeleteAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiUsersByIdRolesByRidDeleteAsync(this ICovenantAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiUsersByIdRolesByRidDeleteWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IdentityRole> ApiRolesGet(this ICovenantAPI operations)
            {
                return operations.ApiRolesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentityRole>> ApiRolesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRolesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static IdentityRole ApiRolesByRidGet(this ICovenantAPI operations, string rid)
            {
                return operations.ApiRolesByRidGetAsync(rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityRole> ApiRolesByRidGetAsync(this ICovenantAPI operations, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRolesByRidGetWithHttpMessagesAsync(rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedCredential> ApiCredentialsGet(this ICovenantAPI operations)
            {
                return operations.ApiCredentialsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedCredential>> ApiCredentialsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedPasswordCredential> ApiCredentialsPasswordsGet(this ICovenantAPI operations)
            {
                return operations.ApiCredentialsPasswordsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedPasswordCredential>> ApiCredentialsPasswordsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsPasswordsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            public static CapturedPasswordCredential ApiCredentialsPasswordsPut(this ICovenantAPI operations, CapturedPasswordCredential credential = default(CapturedPasswordCredential))
            {
                return operations.ApiCredentialsPasswordsPutAsync(credential).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> ApiCredentialsPasswordsPutAsync(this ICovenantAPI operations, CapturedPasswordCredential credential = default(CapturedPasswordCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsPasswordsPutWithHttpMessagesAsync(credential, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            public static CapturedPasswordCredential ApiCredentialsPasswordsPost(this ICovenantAPI operations, CapturedPasswordCredential credential = default(CapturedPasswordCredential))
            {
                return operations.ApiCredentialsPasswordsPostAsync(credential).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> ApiCredentialsPasswordsPostAsync(this ICovenantAPI operations, CapturedPasswordCredential credential = default(CapturedPasswordCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsPasswordsPostWithHttpMessagesAsync(credential, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedHashCredential> ApiCredentialsHashesGet(this ICovenantAPI operations)
            {
                return operations.ApiCredentialsHashesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedHashCredential>> ApiCredentialsHashesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsHashesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            public static CapturedHashCredential ApiCredentialsHashesPut(this ICovenantAPI operations, CapturedHashCredential credential = default(CapturedHashCredential))
            {
                return operations.ApiCredentialsHashesPutAsync(credential).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> ApiCredentialsHashesPutAsync(this ICovenantAPI operations, CapturedHashCredential credential = default(CapturedHashCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsHashesPutWithHttpMessagesAsync(credential, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            public static CapturedHashCredential ApiCredentialsHashesPost(this ICovenantAPI operations, CapturedHashCredential credential = default(CapturedHashCredential))
            {
                return operations.ApiCredentialsHashesPostAsync(credential).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> ApiCredentialsHashesPostAsync(this ICovenantAPI operations, CapturedHashCredential credential = default(CapturedHashCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsHashesPostWithHttpMessagesAsync(credential, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedTicketCredential> ApiCredentialsTicketsGet(this ICovenantAPI operations)
            {
                return operations.ApiCredentialsTicketsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedTicketCredential>> ApiCredentialsTicketsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsTicketsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            public static CapturedTicketCredential ApiCredentialsTicketsPut(this ICovenantAPI operations, CapturedTicketCredential credential = default(CapturedTicketCredential))
            {
                return operations.ApiCredentialsTicketsPutAsync(credential).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> ApiCredentialsTicketsPutAsync(this ICovenantAPI operations, CapturedTicketCredential credential = default(CapturedTicketCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsTicketsPutWithHttpMessagesAsync(credential, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            public static CapturedTicketCredential ApiCredentialsTicketsPost(this ICovenantAPI operations, CapturedTicketCredential credential = default(CapturedTicketCredential))
            {
                return operations.ApiCredentialsTicketsPostAsync(credential).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='credential'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> ApiCredentialsTicketsPostAsync(this ICovenantAPI operations, CapturedTicketCredential credential = default(CapturedTicketCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsTicketsPostWithHttpMessagesAsync(credential, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedCredential ApiCredentialsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiCredentialsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedCredential> ApiCredentialsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiCredentialsByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiCredentialsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCredentialsByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiCredentialsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedPasswordCredential ApiCredentialsPasswordsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiCredentialsPasswordsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> ApiCredentialsPasswordsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsPasswordsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedHashCredential ApiCredentialsHashesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiCredentialsHashesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> ApiCredentialsHashesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsHashesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedTicketCredential ApiCredentialsTicketsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiCredentialsTicketsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> ApiCredentialsTicketsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCredentialsTicketsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EmbeddedResource> ApiEmbeddedresourcesGet(this ICovenantAPI operations)
            {
                return operations.ApiEmbeddedresourcesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmbeddedResource>> ApiEmbeddedresourcesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEmbeddedresourcesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resource'>
            /// </param>
            public static EmbeddedResource ApiEmbeddedresourcesPut(this ICovenantAPI operations, EmbeddedResource resource = default(EmbeddedResource))
            {
                return operations.ApiEmbeddedresourcesPutAsync(resource).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resource'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> ApiEmbeddedresourcesPutAsync(this ICovenantAPI operations, EmbeddedResource resource = default(EmbeddedResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEmbeddedresourcesPutWithHttpMessagesAsync(resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resource'>
            /// </param>
            public static EmbeddedResource ApiEmbeddedresourcesPost(this ICovenantAPI operations, EmbeddedResource resource = default(EmbeddedResource))
            {
                return operations.ApiEmbeddedresourcesPostAsync(resource).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resource'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> ApiEmbeddedresourcesPostAsync(this ICovenantAPI operations, EmbeddedResource resource = default(EmbeddedResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEmbeddedresourcesPostWithHttpMessagesAsync(resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EmbeddedResource ApiEmbeddedresourcesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiEmbeddedresourcesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> ApiEmbeddedresourcesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEmbeddedresourcesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiEmbeddedresourcesByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiEmbeddedresourcesByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiEmbeddedresourcesByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiEmbeddedresourcesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EventModel> ApiEventsGet(this ICovenantAPI operations)
            {
                return operations.ApiEventsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> ApiEventsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anEvent'>
            /// </param>
            public static EventModel ApiEventsPost(this ICovenantAPI operations, EventModel anEvent = default(EventModel))
            {
                return operations.ApiEventsPostAsync(anEvent).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='anEvent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> ApiEventsPostAsync(this ICovenantAPI operations, EventModel anEvent = default(EventModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsPostWithHttpMessagesAsync(anEvent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EventModel ApiEventsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiEventsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> ApiEventsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static long? ApiEventsTimeGet(this ICovenantAPI operations)
            {
                return operations.ApiEventsTimeGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<long?> ApiEventsTimeGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsTimeGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            public static IList<EventModel> ApiEventsRangeByFromdateGet(this ICovenantAPI operations, long fromdate)
            {
                return operations.ApiEventsRangeByFromdateGetAsync(fromdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> ApiEventsRangeByFromdateGetAsync(this ICovenantAPI operations, long fromdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsRangeByFromdateGetWithHttpMessagesAsync(fromdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='todate'>
            /// </param>
            public static IList<EventModel> ApiEventsRangeByFromdateByTodateGet(this ICovenantAPI operations, long fromdate, long todate)
            {
                return operations.ApiEventsRangeByFromdateByTodateGetAsync(fromdate, todate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='todate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> ApiEventsRangeByFromdateByTodateGetAsync(this ICovenantAPI operations, long fromdate, long todate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsRangeByFromdateByTodateGetWithHttpMessagesAsync(fromdate, todate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static DownloadEvent ApiEventsDownloadByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiEventsDownloadByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadEvent> ApiEventsDownloadByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsDownloadByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string ApiEventsDownloadByIdContentGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiEventsDownloadByIdContentGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiEventsDownloadByIdContentGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsDownloadByIdContentGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadEvent'>
            /// </param>
            public static EventModel ApiEventsDownloadPost(this ICovenantAPI operations, DownloadEvent downloadEvent = default(DownloadEvent))
            {
                return operations.ApiEventsDownloadPostAsync(downloadEvent).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='downloadEvent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> ApiEventsDownloadPostAsync(this ICovenantAPI operations, DownloadEvent downloadEvent = default(DownloadEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiEventsDownloadPostWithHttpMessagesAsync(downloadEvent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Grunt> ApiGruntsGet(this ICovenantAPI operations)
            {
                return operations.ApiGruntsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Grunt>> ApiGruntsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grunt'>
            /// </param>
            public static Grunt ApiGruntsPut(this ICovenantAPI operations, Grunt grunt = default(Grunt))
            {
                return operations.ApiGruntsPutAsync(grunt).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grunt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grunt> ApiGruntsPutAsync(this ICovenantAPI operations, Grunt grunt = default(Grunt), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsPutWithHttpMessagesAsync(grunt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grunt'>
            /// </param>
            public static Grunt ApiGruntsPost(this ICovenantAPI operations, Grunt grunt = default(Grunt))
            {
                return operations.ApiGruntsPostAsync(grunt).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grunt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grunt> ApiGruntsPostAsync(this ICovenantAPI operations, Grunt grunt = default(Grunt), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsPostWithHttpMessagesAsync(grunt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Grunt ApiGruntsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGruntsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grunt> ApiGruntsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiGruntsByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiGruntsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiGruntsByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiGruntsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static Grunt ApiGruntsByNameGet(this ICovenantAPI operations, string name)
            {
                return operations.ApiGruntsByNameGetAsync(name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grunt> ApiGruntsByNameGetAsync(this ICovenantAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByNameGetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static Grunt ApiGruntsGuidByGuidGet(this ICovenantAPI operations, string guid)
            {
                return operations.ApiGruntsGuidByGuidGetAsync(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grunt> ApiGruntsGuidByGuidGetAsync(this ICovenantAPI operations, string guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsGuidByGuidGetWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverguid'>
            /// </param>
            public static Grunt ApiGruntsOriginalguidByServerguidGet(this ICovenantAPI operations, string serverguid)
            {
                return operations.ApiGruntsOriginalguidByServerguidGetAsync(serverguid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serverguid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grunt> ApiGruntsOriginalguidByServerguidGetAsync(this ICovenantAPI operations, string serverguid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsOriginalguidByServerguidGetWithHttpMessagesAsync(serverguid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cid'>
            /// </param>
            public static IList<string> ApiGruntsByIdPathByCidGet(this ICovenantAPI operations, int id, int cid)
            {
                return operations.ApiGruntsByIdPathByCidGetAsync(id, cid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiGruntsByIdPathByCidGetAsync(this ICovenantAPI operations, int id, int cid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdPathByCidGetWithHttpMessagesAsync(id, cid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Grunt ApiGruntsByIdOutboundGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGruntsByIdOutboundGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Grunt> ApiGruntsByIdOutboundGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdOutboundGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='command'>
            /// </param>
            public static GruntCommand ApiGruntsByIdInteractPost(this ICovenantAPI operations, int id, string command = default(string))
            {
                return operations.ApiGruntsByIdInteractPostAsync(id, command).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntCommand> ApiGruntsByIdInteractPostAsync(this ICovenantAPI operations, int id, string command = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdInteractPostWithHttpMessagesAsync(id, command, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static byte[] ApiGruntsByIdCompileexecutorGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGruntsByIdCompileexecutorGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<byte[]> ApiGruntsByIdCompileexecutorGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdCompileexecutorGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GruntCommand> ApiCommandsGet(this ICovenantAPI operations)
            {
                return operations.ApiCommandsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GruntCommand>> ApiCommandsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCommandsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntCommand'>
            /// </param>
            public static GruntCommand ApiCommandsPut(this ICovenantAPI operations, GruntCommand gruntCommand = default(GruntCommand))
            {
                return operations.ApiCommandsPutAsync(gruntCommand).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntCommand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntCommand> ApiCommandsPutAsync(this ICovenantAPI operations, GruntCommand gruntCommand = default(GruntCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCommandsPutWithHttpMessagesAsync(gruntCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntCommand'>
            /// </param>
            public static GruntCommand ApiCommandsPost(this ICovenantAPI operations, GruntCommand gruntCommand = default(GruntCommand))
            {
                return operations.ApiCommandsPostAsync(gruntCommand).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntCommand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntCommand> ApiCommandsPostAsync(this ICovenantAPI operations, GruntCommand gruntCommand = default(GruntCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCommandsPostWithHttpMessagesAsync(gruntCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static GruntCommand ApiCommandsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiCommandsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntCommand> ApiCommandsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCommandsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiCommandsByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiCommandsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCommandsByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiCommandsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GruntTask> ApiGrunttasksGet(this ICovenantAPI operations)
            {
                return operations.ApiGrunttasksGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GruntTask>> ApiGrunttasksGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGrunttasksGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            public static GruntTask ApiGrunttasksPut(this ICovenantAPI operations, GruntTask task = default(GruntTask))
            {
                return operations.ApiGrunttasksPutAsync(task).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTask> ApiGrunttasksPutAsync(this ICovenantAPI operations, GruntTask task = default(GruntTask), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGrunttasksPutWithHttpMessagesAsync(task, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            public static GruntTask ApiGrunttasksPost(this ICovenantAPI operations, GruntTask task = default(GruntTask))
            {
                return operations.ApiGrunttasksPostAsync(task).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTask> ApiGrunttasksPostAsync(this ICovenantAPI operations, GruntTask task = default(GruntTask), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGrunttasksPostWithHttpMessagesAsync(task, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static GruntTask ApiGrunttasksByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGrunttasksByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTask> ApiGrunttasksByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGrunttasksByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiGrunttasksByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiGrunttasksByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiGrunttasksByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiGrunttasksByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskname'>
            /// </param>
            public static GruntTask ApiGrunttasksByTasknameGet(this ICovenantAPI operations, string taskname)
            {
                return operations.ApiGrunttasksByTasknameGetAsync(taskname).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskname'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTask> ApiGrunttasksByTasknameGetAsync(this ICovenantAPI operations, string taskname, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGrunttasksByTasknameGetWithHttpMessagesAsync(taskname, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GruntTasking> ApiTaskingsGet(this ICovenantAPI operations)
            {
                return operations.ApiTaskingsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GruntTasking>> ApiTaskingsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTaskingsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntTasking'>
            /// </param>
            public static GruntTasking ApiTaskingsPut(this ICovenantAPI operations, GruntTasking gruntTasking = default(GruntTasking))
            {
                return operations.ApiTaskingsPutAsync(gruntTasking).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntTasking'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTasking> ApiTaskingsPutAsync(this ICovenantAPI operations, GruntTasking gruntTasking = default(GruntTasking), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTaskingsPutWithHttpMessagesAsync(gruntTasking, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntTasking'>
            /// </param>
            public static GruntTasking ApiTaskingsPost(this ICovenantAPI operations, GruntTasking gruntTasking = default(GruntTasking))
            {
                return operations.ApiTaskingsPostAsync(gruntTasking).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gruntTasking'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTasking> ApiTaskingsPostAsync(this ICovenantAPI operations, GruntTasking gruntTasking = default(GruntTasking), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTaskingsPostWithHttpMessagesAsync(gruntTasking, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GruntTasking> ApiGruntsByIdTaskingsGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGruntsByIdTaskingsGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GruntTasking>> ApiGruntsByIdTaskingsGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdTaskingsGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GruntTasking> ApiGruntsByIdTaskingsSearchGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGruntsByIdTaskingsSearchGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GruntTasking>> ApiGruntsByIdTaskingsSearchGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdTaskingsSearchGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GruntTasking> ApiGruntsByIdTaskingsUninitializedGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGruntsByIdTaskingsUninitializedGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GruntTasking>> ApiGruntsByIdTaskingsUninitializedGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdTaskingsUninitializedGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<GruntTasking> ApiGruntsByIdTaskingsSearchUninitializedGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiGruntsByIdTaskingsSearchUninitializedGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GruntTasking>> ApiGruntsByIdTaskingsSearchUninitializedGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsByIdTaskingsSearchUninitializedGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            public static GruntTasking ApiTaskingsByTidGet(this ICovenantAPI operations, int tid)
            {
                return operations.ApiTaskingsByTidGetAsync(tid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTasking> ApiTaskingsByTidGetAsync(this ICovenantAPI operations, int tid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTaskingsByTidGetWithHttpMessagesAsync(tid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            public static void ApiTaskingsByTidDelete(this ICovenantAPI operations, int tid)
            {
                operations.ApiTaskingsByTidDeleteAsync(tid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTaskingsByTidDeleteAsync(this ICovenantAPI operations, int tid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTaskingsByTidDeleteWithHttpMessagesAsync(tid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskingname'>
            /// </param>
            public static GruntTasking ApiGruntsTaskingsByTaskingnameGet(this ICovenantAPI operations, string taskingname)
            {
                return operations.ApiGruntsTaskingsByTaskingnameGetAsync(taskingname).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskingname'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GruntTasking> ApiGruntsTaskingsByTaskingnameGetAsync(this ICovenantAPI operations, string taskingname, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiGruntsTaskingsByTaskingnameGetWithHttpMessagesAsync(taskingname, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ImplantTemplate> ApiImplanttemplatesGet(this ICovenantAPI operations)
            {
                return operations.ApiImplanttemplatesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImplantTemplate>> ApiImplanttemplatesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiImplanttemplatesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='template'>
            /// </param>
            public static ImplantTemplate ApiImplanttemplatesPut(this ICovenantAPI operations, ImplantTemplate template = default(ImplantTemplate))
            {
                return operations.ApiImplanttemplatesPutAsync(template).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='template'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> ApiImplanttemplatesPutAsync(this ICovenantAPI operations, ImplantTemplate template = default(ImplantTemplate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiImplanttemplatesPutWithHttpMessagesAsync(template, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='template'>
            /// </param>
            public static ImplantTemplate ApiImplanttemplatesPost(this ICovenantAPI operations, ImplantTemplate template = default(ImplantTemplate))
            {
                return operations.ApiImplanttemplatesPostAsync(template).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='template'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> ApiImplanttemplatesPostAsync(this ICovenantAPI operations, ImplantTemplate template = default(ImplantTemplate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiImplanttemplatesPostWithHttpMessagesAsync(template, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ImplantTemplate ApiImplanttemplatesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiImplanttemplatesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> ApiImplanttemplatesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiImplanttemplatesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiImplanttemplatesByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiImplanttemplatesByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiImplanttemplatesByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiImplanttemplatesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static ImplantTemplate ApiImplanttemplatesByNameGet(this ICovenantAPI operations, string name)
            {
                return operations.ApiImplanttemplatesByNameGetAsync(name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> ApiImplanttemplatesByNameGetAsync(this ICovenantAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiImplanttemplatesByNameGetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string ApiIndicatorsResultsGet(this ICovenantAPI operations)
            {
                return operations.ApiIndicatorsResultsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiIndicatorsResultsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsResultsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Indicator> ApiIndicatorsGet(this ICovenantAPI operations)
            {
                return operations.ApiIndicatorsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Indicator>> ApiIndicatorsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indicator'>
            /// </param>
            public static Indicator ApiIndicatorsPut(this ICovenantAPI operations, Indicator indicator = default(Indicator))
            {
                return operations.ApiIndicatorsPutAsync(indicator).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indicator'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> ApiIndicatorsPutAsync(this ICovenantAPI operations, Indicator indicator = default(Indicator), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsPutWithHttpMessagesAsync(indicator, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indicator'>
            /// </param>
            public static Indicator ApiIndicatorsPost(this ICovenantAPI operations, Indicator indicator = default(Indicator))
            {
                return operations.ApiIndicatorsPostAsync(indicator).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indicator'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> ApiIndicatorsPostAsync(this ICovenantAPI operations, Indicator indicator = default(Indicator), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsPostWithHttpMessagesAsync(indicator, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<FileIndicator> ApiIndicatorsFilesGet(this ICovenantAPI operations)
            {
                return operations.ApiIndicatorsFilesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FileIndicator>> ApiIndicatorsFilesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsFilesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NetworkIndicator> ApiIndicatorsNetworksGet(this ICovenantAPI operations)
            {
                return operations.ApiIndicatorsNetworksGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkIndicator>> ApiIndicatorsNetworksGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsNetworksGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TargetIndicator> ApiIndicatorsTargetsGet(this ICovenantAPI operations)
            {
                return operations.ApiIndicatorsTargetsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TargetIndicator>> ApiIndicatorsTargetsGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsTargetsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Indicator ApiIndicatorsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiIndicatorsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> ApiIndicatorsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiIndicatorsByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiIndicatorsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiIndicatorsByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiIndicatorsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static FileIndicator ApiIndicatorsFilesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiIndicatorsFilesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileIndicator> ApiIndicatorsFilesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsFilesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static NetworkIndicator ApiIndicatorsNetworksByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiIndicatorsNetworksByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkIndicator> ApiIndicatorsNetworksByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsNetworksByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TargetIndicator ApiIndicatorsTargetsByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiIndicatorsTargetsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TargetIndicator> ApiIndicatorsTargetsByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndicatorsTargetsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Launcher> ApiLaunchersGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Launcher>> ApiLaunchersGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BinaryLauncher ApiLaunchersBinaryGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersBinaryGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> ApiLaunchersBinaryGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersBinaryGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static BinaryLauncher ApiLaunchersBinaryPut(this ICovenantAPI operations, BinaryLauncher launcher = default(BinaryLauncher))
            {
                return operations.ApiLaunchersBinaryPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> ApiLaunchersBinaryPutAsync(this ICovenantAPI operations, BinaryLauncher launcher = default(BinaryLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersBinaryPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BinaryLauncher ApiLaunchersBinaryPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersBinaryPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> ApiLaunchersBinaryPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersBinaryPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static BinaryLauncher ApiLaunchersBinaryHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersBinaryHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> ApiLaunchersBinaryHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersBinaryHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PowerShellLauncher ApiLaunchersPowershellGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersPowershellGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> ApiLaunchersPowershellGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersPowershellGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static PowerShellLauncher ApiLaunchersPowershellPut(this ICovenantAPI operations, PowerShellLauncher launcher = default(PowerShellLauncher))
            {
                return operations.ApiLaunchersPowershellPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> ApiLaunchersPowershellPutAsync(this ICovenantAPI operations, PowerShellLauncher launcher = default(PowerShellLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersPowershellPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PowerShellLauncher ApiLaunchersPowershellPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersPowershellPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> ApiLaunchersPowershellPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersPowershellPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static PowerShellLauncher ApiLaunchersPowershellHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersPowershellHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> ApiLaunchersPowershellHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersPowershellHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MSBuildLauncher ApiLaunchersMsbuildGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersMsbuildGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> ApiLaunchersMsbuildGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMsbuildGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static MSBuildLauncher ApiLaunchersMsbuildPut(this ICovenantAPI operations, MSBuildLauncher launcher = default(MSBuildLauncher))
            {
                return operations.ApiLaunchersMsbuildPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> ApiLaunchersMsbuildPutAsync(this ICovenantAPI operations, MSBuildLauncher launcher = default(MSBuildLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMsbuildPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MSBuildLauncher ApiLaunchersMsbuildPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersMsbuildPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> ApiLaunchersMsbuildPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMsbuildPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static MSBuildLauncher ApiLaunchersMsbuildHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersMsbuildHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> ApiLaunchersMsbuildHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMsbuildHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static InstallUtilLauncher ApiLaunchersInstallutilGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersInstallutilGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> ApiLaunchersInstallutilGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersInstallutilGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static InstallUtilLauncher ApiLaunchersInstallutilPut(this ICovenantAPI operations, InstallUtilLauncher launcher = default(InstallUtilLauncher))
            {
                return operations.ApiLaunchersInstallutilPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> ApiLaunchersInstallutilPutAsync(this ICovenantAPI operations, InstallUtilLauncher launcher = default(InstallUtilLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersInstallutilPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static InstallUtilLauncher ApiLaunchersInstallutilPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersInstallutilPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> ApiLaunchersInstallutilPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersInstallutilPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static InstallUtilLauncher ApiLaunchersInstallutilHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersInstallutilHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> ApiLaunchersInstallutilHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersInstallutilHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WmicLauncher ApiLaunchersWmicGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersWmicGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> ApiLaunchersWmicGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWmicGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static WmicLauncher ApiLaunchersWmicPut(this ICovenantAPI operations, WmicLauncher launcher = default(WmicLauncher))
            {
                return operations.ApiLaunchersWmicPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> ApiLaunchersWmicPutAsync(this ICovenantAPI operations, WmicLauncher launcher = default(WmicLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWmicPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WmicLauncher ApiLaunchersWmicPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersWmicPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> ApiLaunchersWmicPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWmicPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static WmicLauncher ApiLaunchersWmicHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersWmicHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> ApiLaunchersWmicHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWmicHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Regsvr32Launcher ApiLaunchersRegsvr32Get(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersRegsvr32GetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> ApiLaunchersRegsvr32GetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersRegsvr32GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static Regsvr32Launcher ApiLaunchersRegsvr32Put(this ICovenantAPI operations, Regsvr32Launcher launcher = default(Regsvr32Launcher))
            {
                return operations.ApiLaunchersRegsvr32PutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> ApiLaunchersRegsvr32PutAsync(this ICovenantAPI operations, Regsvr32Launcher launcher = default(Regsvr32Launcher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersRegsvr32PutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Regsvr32Launcher ApiLaunchersRegsvr32Post(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersRegsvr32PostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> ApiLaunchersRegsvr32PostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersRegsvr32PostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static Regsvr32Launcher ApiLaunchersRegsvr32HostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersRegsvr32HostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> ApiLaunchersRegsvr32HostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersRegsvr32HostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MshtaLauncher ApiLaunchersMshtaGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersMshtaGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> ApiLaunchersMshtaGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMshtaGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static MshtaLauncher ApiLaunchersMshtaPut(this ICovenantAPI operations, MshtaLauncher launcher = default(MshtaLauncher))
            {
                return operations.ApiLaunchersMshtaPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> ApiLaunchersMshtaPutAsync(this ICovenantAPI operations, MshtaLauncher launcher = default(MshtaLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMshtaPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MshtaLauncher ApiLaunchersMshtaPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersMshtaPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> ApiLaunchersMshtaPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMshtaPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static MshtaLauncher ApiLaunchersMshtaHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersMshtaHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> ApiLaunchersMshtaHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersMshtaHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CscriptLauncher ApiLaunchersCscriptGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersCscriptGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> ApiLaunchersCscriptGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersCscriptGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static CscriptLauncher ApiLaunchersCscriptPut(this ICovenantAPI operations, CscriptLauncher launcher = default(CscriptLauncher))
            {
                return operations.ApiLaunchersCscriptPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> ApiLaunchersCscriptPutAsync(this ICovenantAPI operations, CscriptLauncher launcher = default(CscriptLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersCscriptPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CscriptLauncher ApiLaunchersCscriptPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersCscriptPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> ApiLaunchersCscriptPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersCscriptPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static CscriptLauncher ApiLaunchersCscriptHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersCscriptHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> ApiLaunchersCscriptHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersCscriptHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WscriptLauncher ApiLaunchersWscriptGet(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersWscriptGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> ApiLaunchersWscriptGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWscriptGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            public static WscriptLauncher ApiLaunchersWscriptPut(this ICovenantAPI operations, WscriptLauncher launcher = default(WscriptLauncher))
            {
                return operations.ApiLaunchersWscriptPutAsync(launcher).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='launcher'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> ApiLaunchersWscriptPutAsync(this ICovenantAPI operations, WscriptLauncher launcher = default(WscriptLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWscriptPutWithHttpMessagesAsync(launcher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WscriptLauncher ApiLaunchersWscriptPost(this ICovenantAPI operations)
            {
                return operations.ApiLaunchersWscriptPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> ApiLaunchersWscriptPostAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWscriptPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static WscriptLauncher ApiLaunchersWscriptHostedPost(this ICovenantAPI operations, HostedFile file = default(HostedFile))
            {
                return operations.ApiLaunchersWscriptHostedPostAsync(file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> ApiLaunchersWscriptHostedPostAsync(this ICovenantAPI operations, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLaunchersWscriptHostedPostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ListenerType> ApiListenersTypesGet(this ICovenantAPI operations)
            {
                return operations.ApiListenersTypesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ListenerType>> ApiListenersTypesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersTypesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ListenerType ApiListenersTypesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiListenersTypesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListenerType> ApiListenersTypesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersTypesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Listener> ApiListenersGet(this ICovenantAPI operations)
            {
                return operations.ApiListenersGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Listener>> ApiListenersGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listener'>
            /// </param>
            public static Listener ApiListenersPut(this ICovenantAPI operations, Listener listener = default(Listener))
            {
                return operations.ApiListenersPutAsync(listener).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listener'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Listener> ApiListenersPutAsync(this ICovenantAPI operations, Listener listener = default(Listener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersPutWithHttpMessagesAsync(listener, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Listener ApiListenersByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiListenersByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Listener> ApiListenersByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiListenersByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiListenersByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiListenersByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiListenersByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static HttpListener ApiListenersHttpByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiListenersHttpByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> ApiListenersHttpByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersHttpByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listener'>
            /// </param>
            public static HttpListener ApiListenersHttpPut(this ICovenantAPI operations, HttpListener listener = default(HttpListener))
            {
                return operations.ApiListenersHttpPutAsync(listener).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listener'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> ApiListenersHttpPutAsync(this ICovenantAPI operations, HttpListener listener = default(HttpListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersHttpPutWithHttpMessagesAsync(listener, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listener'>
            /// </param>
            public static HttpListener ApiListenersHttpPost(this ICovenantAPI operations, HttpListener listener = default(HttpListener))
            {
                return operations.ApiListenersHttpPostAsync(listener).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listener'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> ApiListenersHttpPostAsync(this ICovenantAPI operations, HttpListener listener = default(HttpListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersHttpPostWithHttpMessagesAsync(listener, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<HostedFile> ApiListenersByIdHostedfilesGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiListenersByIdHostedfilesGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HostedFile>> ApiListenersByIdHostedfilesGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersByIdHostedfilesGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='file'>
            /// </param>
            public static HostedFile ApiListenersByIdHostedfilesPut(this ICovenantAPI operations, int id, HostedFile file = default(HostedFile))
            {
                return operations.ApiListenersByIdHostedfilesPutAsync(id, file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> ApiListenersByIdHostedfilesPutAsync(this ICovenantAPI operations, int id, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersByIdHostedfilesPutWithHttpMessagesAsync(id, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='file'>
            /// </param>
            public static HostedFile ApiListenersByIdHostedfilesPost(this ICovenantAPI operations, int id, HostedFile file = default(HostedFile))
            {
                return operations.ApiListenersByIdHostedfilesPostAsync(id, file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> ApiListenersByIdHostedfilesPostAsync(this ICovenantAPI operations, int id, HostedFile file = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersByIdHostedfilesPostWithHttpMessagesAsync(id, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            public static HostedFile ApiListenersByIdHostedfilesByHfidGet(this ICovenantAPI operations, int id, int hfid)
            {
                return operations.ApiListenersByIdHostedfilesByHfidGetAsync(id, hfid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> ApiListenersByIdHostedfilesByHfidGetAsync(this ICovenantAPI operations, int id, int hfid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiListenersByIdHostedfilesByHfidGetWithHttpMessagesAsync(id, hfid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            public static void ApiListenersByIdHostedfilesByHfidDelete(this ICovenantAPI operations, int id, int hfid)
            {
                operations.ApiListenersByIdHostedfilesByHfidDeleteAsync(id, hfid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiListenersByIdHostedfilesByHfidDeleteAsync(this ICovenantAPI operations, int id, int hfid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiListenersByIdHostedfilesByHfidDeleteWithHttpMessagesAsync(id, hfid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Profile> ApiProfilesGet(this ICovenantAPI operations)
            {
                return operations.ApiProfilesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Profile>> ApiProfilesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            public static Profile ApiProfilesPut(this ICovenantAPI operations, Profile profile = default(Profile))
            {
                return operations.ApiProfilesPutAsync(profile).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> ApiProfilesPutAsync(this ICovenantAPI operations, Profile profile = default(Profile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesPutWithHttpMessagesAsync(profile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            public static Profile ApiProfilesPost(this ICovenantAPI operations, Profile profile = default(Profile))
            {
                return operations.ApiProfilesPostAsync(profile).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> ApiProfilesPostAsync(this ICovenantAPI operations, Profile profile = default(Profile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesPostWithHttpMessagesAsync(profile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Profile ApiProfilesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiProfilesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> ApiProfilesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiProfilesByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiProfilesByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiProfilesByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiProfilesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<HttpProfile> ApiProfilesHttpGet(this ICovenantAPI operations)
            {
                return operations.ApiProfilesHttpGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HttpProfile>> ApiProfilesHttpGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesHttpGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            public static Profile ApiProfilesHttpPut(this ICovenantAPI operations, HttpProfile profile = default(HttpProfile))
            {
                return operations.ApiProfilesHttpPutAsync(profile).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> ApiProfilesHttpPutAsync(this ICovenantAPI operations, HttpProfile profile = default(HttpProfile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesHttpPutWithHttpMessagesAsync(profile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            public static HttpProfile ApiProfilesHttpPost(this ICovenantAPI operations, HttpProfile profile = default(HttpProfile))
            {
                return operations.ApiProfilesHttpPostAsync(profile).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpProfile> ApiProfilesHttpPostAsync(this ICovenantAPI operations, HttpProfile profile = default(HttpProfile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesHttpPostWithHttpMessagesAsync(profile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static HttpProfile ApiProfilesHttpByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiProfilesHttpByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpProfile> ApiProfilesHttpByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiProfilesHttpByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiProfilesHttpByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiProfilesHttpByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiProfilesHttpByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiProfilesHttpByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ReferenceAssembly> ApiReferenceassembliesGet(this ICovenantAPI operations)
            {
                return operations.ApiReferenceassembliesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ReferenceAssembly>> ApiReferenceassembliesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferenceassembliesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assembly'>
            /// </param>
            public static ReferenceAssembly ApiReferenceassembliesPut(this ICovenantAPI operations, ReferenceAssembly assembly = default(ReferenceAssembly))
            {
                return operations.ApiReferenceassembliesPutAsync(assembly).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assembly'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> ApiReferenceassembliesPutAsync(this ICovenantAPI operations, ReferenceAssembly assembly = default(ReferenceAssembly), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferenceassembliesPutWithHttpMessagesAsync(assembly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assembly'>
            /// </param>
            public static ReferenceAssembly ApiReferenceassembliesPost(this ICovenantAPI operations, ReferenceAssembly assembly = default(ReferenceAssembly))
            {
                return operations.ApiReferenceassembliesPostAsync(assembly).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assembly'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> ApiReferenceassembliesPostAsync(this ICovenantAPI operations, ReferenceAssembly assembly = default(ReferenceAssembly), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferenceassembliesPostWithHttpMessagesAsync(assembly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ReferenceAssembly ApiReferenceassembliesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiReferenceassembliesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> ApiReferenceassembliesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferenceassembliesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiReferenceassembliesByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiReferenceassembliesByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReferenceassembliesByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReferenceassembliesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ReferenceSourceLibrary> ApiReferencesourcelibrariesGet(this ICovenantAPI operations)
            {
                return operations.ApiReferencesourcelibrariesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ReferenceSourceLibrary>> ApiReferencesourcelibrariesGetAsync(this ICovenantAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferencesourcelibrariesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='library'>
            /// </param>
            public static ReferenceSourceLibrary ApiReferencesourcelibrariesPut(this ICovenantAPI operations, ReferenceSourceLibrary library = default(ReferenceSourceLibrary))
            {
                return operations.ApiReferencesourcelibrariesPutAsync(library).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='library'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> ApiReferencesourcelibrariesPutAsync(this ICovenantAPI operations, ReferenceSourceLibrary library = default(ReferenceSourceLibrary), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferencesourcelibrariesPutWithHttpMessagesAsync(library, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='library'>
            /// </param>
            public static ReferenceSourceLibrary ApiReferencesourcelibrariesPost(this ICovenantAPI operations, ReferenceSourceLibrary library = default(ReferenceSourceLibrary))
            {
                return operations.ApiReferencesourcelibrariesPostAsync(library).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='library'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> ApiReferencesourcelibrariesPostAsync(this ICovenantAPI operations, ReferenceSourceLibrary library = default(ReferenceSourceLibrary), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferencesourcelibrariesPostWithHttpMessagesAsync(library, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ReferenceSourceLibrary ApiReferencesourcelibrariesByIdGet(this ICovenantAPI operations, int id)
            {
                return operations.ApiReferencesourcelibrariesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> ApiReferencesourcelibrariesByIdGetAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiReferencesourcelibrariesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiReferencesourcelibrariesByIdDelete(this ICovenantAPI operations, int id)
            {
                operations.ApiReferencesourcelibrariesByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiReferencesourcelibrariesByIdDeleteAsync(this ICovenantAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiReferencesourcelibrariesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
